[tool.poetry]
name = "text-prompt-generator"
version = "0.2.0"
description = ""
authors = ["s7500 <stezurrodion69@gmail.com>",
    "tesha91 <alexander@atlas.design>"]
readme = "README.md"

package-mode = false

[tool.poetry.dependencies]
python = "^3.11"
# numpy = "1.26.4"
openai = "1.64.0"
pydantic = "2.10.6"
requests = "2.32.3"
torch = "2.5.1"
huggingface-hub = "0.29.1"
tqdm = "4.67.1"
#transformers = "==4.48.3"
#protobuf = "==5.29.3"
#tqdm = "4.67.1"
#pytest = "8.3.4"
#accelerate = "1.3.0"
loguru = "0.7.3"
#nvitop = "1.4.2"
#python-multipart = "0.0.20"
vllm = "0.7.3"
#bitsandbytes = "0.45.2"
#tensorizer = "^2.9.1"
groq = "0.18.0"
discord-webhook = "1.3.1"
#fastapi = "0.115.8"
#uvicorn = "0.34.0"

[tool.poetry.group.dev.dependencies]
poetry = { version = "1.8.3" }
poethepoet = { version = "0.31.1", extras = ["poetry_plugin"] }
ruff = { version = "0.8.1" }
bandit = { version = "1.8.0" }
black = { version = "24.10.0" }
mypy = { version = "1.13.0" }
types-PyYAML = "6.0.12.*"
types-requests = "2.32.0.*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
target-version = ['py311']
line-length = 120
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.pytest_cache
  | \.idea
  | \.venv
  | \.vscode
)/
'''

[tool.ruff]
target-version = "py311"
cache-dir = ".reports/ruff_cache"
line-length = 120
src = ["sources"]
namespace-packages = ["sources"]
fix = true
output-format = "full"
include = ["*.py"]
exclude = [
    '.venv/.*',
    "tests",
]

[tool.ruff.lint]
select = [
    "E", # pycodestyle
    "F", # pyflakes
    "UP", # pyupgrade
    "I", # isort
    "S", # flake8-bandit
    "B", # flake8-bugbear
    "Q", # flake8-quotes
    "ASYNC", # flake8-async
    "PTH", # flake8-use-pathlib
]
# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude directories
exclude = [
    ".*",
    "tests",
]
[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = []

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.isort]
combine-as-imports = true
lines-after-imports = 2

[tool.bandit]
skips = ["B104"]
exclude_dirs = [
    "./.*/**",
    "tests",
]


[tool.mypy]
cache_dir = ".reports/mypy_cache/"
ignore_missing_imports = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
warn_unused_ignores = false
warn_return_any = true
warn_no_return = false
warn_unreachable = true
strict_equality = true
warn_redundant_casts = true
exclude = [
    '.venv/.*',
    "tests",
]

[[tool.mypy.overrides]]
module = [
    "types-pyyaml",
]
ignore_errors = true

[tool.poe]
poetry_command = ""

[tool.poe.tasks.run-check]
help = "Run tests and try fix format"
ignore_fail = "return_non_zero"
sequence = [
    { cmd = "ruff check ." },
    { cmd = "black ." },
    { cmd = "bandit . -rq -c pyproject.toml" },
    { cmd = "mypy --junit-xml .reports/mypy-junit-report.xml ." },
]